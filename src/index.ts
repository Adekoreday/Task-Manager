import express, {
  json,
  urlencoded,
  Request,
  Response,
  NextFunction
} from 'express'
import { errorHandler, HttpStatusCode } from './utils/errorHandler'
import { ServerResponse } from './utils/serverResponse'
import logger from './utils/logger'
import { config } from 'dotenv'
import routeV1 from './routesV1'
import { ConnectDb } from './database'
import swaggerJsdoc from 'swagger-jsdoc'
import swaggerUi from 'swagger-ui-express'
import cors from 'cors'

config()

const PORT = process.env.PORT || 6000
ConnectDb()

const options = {
  // List of files to be processes. You can also set globs './routes/*.js'
  apis: ['./build/index.js'],
  basePath: '/',
  swaggerDefinition: {
    // Like the one described here: https://swagger.io/specification/#infoObject
    info: {
      description: 'Todo API with autogenerated swagger doc',
      swagger: '2.0',
      title: 'Todo API',
      contact: {
        name: 'Adeyemi Adekorede Adeseyi'
      },
      servers: ['http://localhost:6000'],
      version: '1.0.0'
    }
  }
}

const specs = swaggerJsdoc(options)

const app = express()
app.use(cors())
app.use(json())
app.use(urlencoded({ extended: false }))
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs))

/**
 * @swagger
 * /:
 *  get:
 *    description: Use to test if app is working
 *    responses:
 *      '200':
 *        description: A successful response
 */
app.get('/', (request: Request, response: Response) => {
  ServerResponse(response, HttpStatusCode.OK, 'welcome to Task App', null)
})
app.use('/api/v1', routeV1)

app.use('*', (request: Request, response: Response) => {
  return ServerResponse(
    response,
    HttpStatusCode.NOT_FOUND,
    'route not found',
    null
  )
})

app.use(
  async (
    err: Error,
    request: Request,
    response: Response,
    next: NextFunction
  ) => {
    if (errorHandler.isTrustedError(err)) {
      await errorHandler.handleError(err, request, response)
    } else {
      next(err)
    }
  }
)
if (process.env.NODE_ENV !== 'test') {
  app.listen(PORT, () => logger.info(`Server started on port ${PORT}`))
}

export default app
